### 
# Purpose: Produce a Makefile from Visual Studio 7 project files
#
# Usage
#
#  # First define these variable(s)
#  solution_file: sln file which will be written to the generated make rules for VS-devenv
#
#  # Now source this file into your shell file
#  . ./MakeDepsFunctions.sh
#
#  # Now call the functions defined in this file. These will write make-variable definitions to standard output
#  extract_(cs|vc|vd)  short_name project_directory_path  project_file_name  project_output_file_path  [dependencies ...]
#      # short_name: used as suffix for makefile variables and targets (e.g. my_lib  => bin_my_lib, src_my_lib)
#      # cs: C# projects, vc: Visual C/C++ projects, vd: installer projects 
#      # dependencies: e.g. static libraries linked to the project output file.
#
# Generated Variables
#  sources - source files of all projects
#  binaries - output files of all projects
#  phony_targets - all generatet shortcut target names
#  bin_X  - output file of project X
#  src_X  - source file of project X
#
# Generated Rules
# phony_target real_target : proj_sources and dependencies
#        $(devenv) solution_file /build Release /project project_name
#
# For example, the following was generated for project clocker:
# ### Build src/clocker/Release/clocker.exe
# bin_clocker $(bin_clocker) : $(src_clocker) 
#         $(devenv) ./3DProf-Solution/3DProf.sln /build Release /project clocker
#
# ...from the function call:
# extract_vc clocker    ${pd}/clocker              clocker.vcproj        ${pd}/clocker/Release/clocker.exe


config=Release

function test_project_file() {
  proj_file=$1;
  if ! test -e $proj_file; then
    echo "Project file \"$proj_file\" does not exist or wrong path."
    trap "" EXIT
    exit 1;
  fi
}

function extract_cs() {
  make_var=src_${1}
  make_var_tgt=bin_${1}
  make_var_proj=prj_${1}
  make_var_dir=dir_${1}
  path=$2
  project_file=$3
  target=${4}
  project_name=$(basename $project_file .csproj)

  test_project_file $path/$project_file 

cat <<EOF
${make_var} = \$(addprefix $path/, \\
 $project_file \\
EOF
  grep RelPath $path/$project_file |
    sed -e 's/^.*RelPath = \"\(.*\)\".*$/\1/' \
        -e 's=\\=\/=g' -e 's/$/ \\/' -e 's=^\( *\)\./=\1='
cat <<EOF
 )

${make_var_tgt} = ${target}
${make_var_dir} = ${path}
${make_var_proj} = ${path}/${project_file}

sources        += \$(${make_var}) 
binaries       += \$(${make_var_tgt}) 
project_files  += ${path}/${project_file}
phony_targets  += ${make_var_tgt}

### Build ${target}
${make_var_tgt} \$(${make_var_tgt}) : \$(${make_var})
	\$(devenv) ${solution_file} /build ${config} /project ${project_name}

EOF
}


function extract_vc() {
  make_var=src_${1}
  make_var_tgt=bin_${1}
  make_var_proj=prj_${1}
  make_var_dir=dir_${1}
  path=$2
  project_file=$3
  target=${4}
  project_deps=${5}
  project_name=$(grep 'Name=' $path/$project_file | head -1 | sed -e 's/.*Name="\(.*\)".*$/\1/')

  test_project_file $path/$project_file 

cat <<EOF
${make_var} = \$(addprefix $path/, \\
 $project_file \\
EOF
  grep RelativePath $path/$project_file |
    sed -e 's/^.*RelativePath=\"\(.*\)\".*$/ \1/' \
        -e 's=\\=\/=g' -e 's/$/ \\/' -e 's=^\( *\)\./=\1='
cat <<EOF
 )

${make_var_tgt} = ${target}
${make_var_dir} = ${path}
${make_var_proj} = ${path}/${project_file}

sources        += \$(${make_var}) 
binaries       += \$(${make_var_tgt})
project_files  += ${path}/${project_file}
phony_targets  += ${make_var_tgt}

EOF

cat <<EOF >>${build_rules_file}
### Build ${target}
${make_var_tgt} \$(${make_var_tgt}) : \$(${make_var}) ${project_deps}
	\$(devenv) ${solution_file} /build ${config} /project ${project_name}

EOF
}


function extract_vd() {
  make_var=src_${1}
  make_var_tgt=bin_${1}
  make_var_proj=prj_${1}
  make_var_dir=dir_${1}
  path=$2
  project_file=$3
  target=${4}
  project_deps=${5}
  project_name=$(grep '"ProjectName" =' $path/$project_file | head -1 | sed -e 's/.*"ProjectName" = "8:\(.*\)".*$/\1/')

  test_project_file $path/$project_file 

cat <<EOF
${make_var} = \$(addprefix $path/, \\
 $project_file \\
EOF
  grep RelativePath $path/$project_file |
    sed -e 's/^.*RelativePath=\"\(.*\)\".*$/ \1/' \
        -e 's=\\=\/=g' -e 's/$/ \\/' -e 's=^\( *\)\./=\1='
cat <<EOF
 )

${make_var_tgt} = ${target}
${make_var_proj} = ${path}/${project_file}

#sources        += \$(${make_var}) 
#binaries       += \$(${make_var_tgt}) 
project_files  += ${path}/${project_file}
phony_targets  += ${make_var_tgt}
EOF

cat <<EOF >>${build_rules_file}
### Build ${target}
${make_var_tgt} \$(${make_var_tgt}) : \$(${make_var}) ${project_deps}
	\$(devenv) ${solution_file} /build ${config} /project ${project_name}

EOF
}




cat <<EOF
### Automtically generated by $0.  Do not edit!

EOF



build_rules_file=build_rules.txt
echo  >"${build_rules_file}" "######### Build Rules #########"
trap 'cat "${build_rules_file}"; rm -f "${build_rules_file}"' EXIT
